/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package PiezasAjedrez;

import static ajedrez.Tablero.COLUMNAS;
import static ajedrez.Tablero.FILAS;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JPanel;


/**
 *
 * @author javie
 * La clase piezas surge como resultado de la necesidad de usar herencia múltiple debido
 * a la herencia por parte de JPanel y de Figuras. Es necesario la creación de esta clase, ya que las
 * variables de una clase interface son static, final y public por defecto. Al ser final, el tablero no se
 * puede modificar una vez declarado, pero yo necesito un atributo tablero que compartan todas las piezas del
 * ajedrez, y que puedan modificar este.
 */
public abstract class Piezas extends javax.swing.JPanel implements Figuras{
    
    static JPanel[][] tablero; // La interfaz que muestra el tablero
    int[] coordenadas; // Coordenadas da cada pieza
    int blanco; // 0 si es negro, 1 si es blanco
    Scanner entradaDatos; //Entrada de datos, para el menu acciones
    public int[] mover; //Almacena el numero de casillas que la figura puede avanzar en las direntes orientaciones
    public int[] comer; //Almacena el numero de casillas donde se hallan las figuras que puede comer en las diferentes direeciones
    final int ORIENTACIONES = 8;
    
    /**
     * Creates new form Piezas
     * Constructor de la clase piezas
     */
    public Piezas() {
        initComponents();
        this.tablero= new JPanel[FILAS][COLUMNAS];
        this.blanco=1;
        this.coordenadas = new int[Piezas.TAM_COORDENADAS];
        this.mover=new int[ORIENTACIONES];
        this.comer=new int[ORIENTACIONES];
        this.entradaDatos = new Scanner(System.in);
    }
    
    /**
     *iniMoverComer()
     * Iniciliza los vectores mover y comer a 0
     */
    public void iniMoverComer(){
        for(int indx=0;indx<ORIENTACIONES;indx++){
            this.mover[indx]=0;
            this.comer[indx]=0;
        }
    }
    
    /**
    * setCoordenadas()
    * Establece las coordenadas de las piezas: Peon
    * @param fila: fila del tablero en la que se encuentra la pieza
    * @param columna: columna del tablero en la que se encuentra la pieza
    */
    @Override
    public void setCoordenadas(int fila,int columna){
        this.coordenadas[0]=fila;
        this.coordenadas[1]=columna;
    }
    
    /**
    * setIcono()
    * Establece el icono de cada pieza: Peon
    * @param icono: imagen del paquete ImagenesFiguras que se corresponde con el icono
    */
    @Override
    public void setIcono(ImageIcon icon){
        this.iconoFigura.setIcon(icon);
    }
    
     /**
    * setColor()
    * Establece el color de la pieza: Peon 
    * @param blanco: booleano; true = blanco, false = negro
    */
    @Override
    public void setColor(int blanco){
        this.blanco=blanco;
    }
    
    /**
    * SetTablero
    * Establece el tablero al que acceden todas las piezas. 
    * Se llama una vez todas las piezas han sido colocadas
    * @param tablero: tablero de ajedrez tras haber añadido todas las piezas
    */
    public static void setTablero(JPanel[][] tablero) {
        Piezas.tablero=tablero;
    }
    
    /**
     * actualizartablero()
     * Actualiza el tablero tras mover o comer una figura/pieza.
     * @param filaAnt: fila actual en la que se encuentra la pieza a mover
     * @param col: columna en la que se encuentra la pieza a mover 
     */
    public void actualizarTablero(int filaAnt,int colAnt){
        int fila=this.coordenadas[0];
        int col=this.coordenadas[1];
        tablero[filaAnt][colAnt].remove(this);
        tablero[filaAnt][colAnt].repaint();
        tablero[fila][col].add(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iconoFigura = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(40, 40));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(40, 40));
        setLayout(new java.awt.GridLayout(1, 0));

        iconoFigura.setBackground(new java.awt.Color(255, 255, 255));
        iconoFigura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagenesFiguras/peonNegro.png"))); // NOI18N
        iconoFigura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconoFiguraActionPerformed(evt);
            }
        });
        add(iconoFigura);
    }// </editor-fold>//GEN-END:initComponents

    /**
    * iconoFiguraActionPerformed()
    * Cuando pulsamos en la figura, esta se mueve o despliega un menu acerca de como moverse
    * @param evt: evento que surge de clicar el boton de la pieza.
    */
    private void iconoFiguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconoFiguraActionPerformed
        int[] comer=calcCasComer();
        boolean pcomer=false;
        for(int orientacion=0;orientacion<ORIENTACIONES;orientacion++){
            if(comer[orientacion]>0){
                pcomer=true;
            }
        }
        
        if(pcomer){
            int accion=menuOpciones("Ingresa la accion(1 comer o 2 moverse): ",1,2);
            if(accion==1){
                this.comerFigura();
            }else{
                this.moverFigura();
            }
        }else{
            this.moverFigura();
        }
        
    }//GEN-LAST:event_iconoFiguraActionPerformed
     /**
    * menuOpciones()
    * Crea un menu, que muestra un numero de opciones a escoger.Ej: menu para escoger accion, movimiento,
    * que figura comer en caso de poder comer dos más,etc.
    * @param mAccion: mensaje que describe la accion.
    * @param nMin: Numero minimo a introducir, representaria la primera opcion
    * @param nMax: Numero maximo a introducir, representaria la ultima opcion
    * @return accion: accion que puede hacer la figura : 1 comer, 2 moverse 
    */
    public int menuOpciones(String mAccion,int nMin,int nMax){
        int accion=-1;
        while(accion<nMin || accion>nMax){
            System.out.print(mAccion);
            accion = this.entradaDatos.nextInt();
            System.out.println("Accion escogida: " + accion);
        }
        
        return accion;
    }
    
    /**
     * calcCasDisp()
     * Calcula el numero de casillas disponibles para moverse en las distintas
     * direcciones teniendo en cuenta las piezas de un solo color.
     */
    public abstract int[] calcCasDisp(int color);
    
    /**
    * calcCasMover()
    * Calcula en cada direccion el numero de casillas máximas disponibles para moverse
    * @return mover: vector int que contiene las casillas disponibles a las que moverse
    */
    @Override
    public abstract int[] calcCasMover();
    
    /**
    * calcCasComer()
    * Calcula en cada direccion el numero de casillas necesarias para comer la figura (si la encuentra)
    * @return comer: vector int que contiene las casillas necesarias para comer las figuras
    */
    @Override
    public abstract int[] calcCasComer();
    
    
    /**
    * MoverFigura()
    * Define el movimiento de cada figura
    */
    @Override
    public abstract void moverFigura();
       
    /**
    * comerFigura()
    * Define la acción de comer una figura
    */
    @Override
    public abstract void comerFigura();

    /**
    * comprobarPieza()
    * Comprueba si hay una pieza en las coordenadas dadas
    * @param fila: fila donde hay que comprobar si se halla una pieza
    * @param columna: columna donde hay que comprobar si se halla una pieza
    * @return pieza: booleano, true si hay una pieza en la casilla a comprobar, false si no.
    */
    boolean comprobarPieza(int fila, int col){
        boolean pieza=false;
        if(this.tablero[fila][col].getComponents().length>0){
            pieza=true;
        }
        return pieza;
    }
    
    /**
    * comprobarPieza()
    * Comprueba si hay una pieza en las coordenadas dadas
    * @param fila: fila donde hay que comprobar si se halla una pieza
    * @param columna: columna donde hay que comprobar si se halla una pieza
    * @return pieza: booleano, true si hay una pieza en la casilla a comprobar, false si no.
    */
    boolean comprobarPiezaColor(int fila, int col,int color){
        boolean hayPieza=false;
        if(this.comprobarPieza(fila,col)){
            Piezas pieza=(Piezas) this.tablero[fila][col].getComponent(0);
            if(pieza.blanco==color){
                hayPieza=true;
            }  
        }
        return hayPieza;
    }
    
    /**
     * salirseTablero
     * Detecta si una figura se va salir del tablero
     * @param disH: numeros de casillas horizontales que se desplazaría la figura.
     * @param disV: numeros de casillas verticales que se desplazaría la figura
     */
    public boolean salirseTablero(int disH,int disV){
        boolean salir=false;
        if(coordenadas[1]+disH>(COLUMNAS-1) || coordenadas[1]+disH<0){
            salir=true;
        } 
        if(coordenadas[0]+disV>(FILAS-1) || coordenadas[0]+disV<0){
            salir=true;
        }    
        return salir;
    }
    
    /**
     * setNCasillas()
     * Establece para una orientacion el número de casillas disponibles a moverse, si encuentra una figura o se
     * sale de tablero, almacena la posicion anterior. Sino se queda el valor por defecto de nCasillas que es 
     * el número máximo que se puede desplazar la figura.
     * @param nCasillas: vector que almacena las casillas disponibles
     * @param orientacion: orientacion del desplazamiento a calcular
     * @param disH: número de casillas que se desplaza en horizontal
     * @param disV: número de casillas que se desplaza en vertical
     * @param fil: fila donde se comprueba si hay una figura
     * @param col: columna donde se comprueba si hay una figura
     * @param color: color de la figura a buscar
     * @param pos: desplazamiento en esa orientacion.
     */
    public boolean setNCasillas(int[] nCasillas,int orientacion,int disH,int disV,int fil,int col,int color,int pos){
        boolean salir=false;
        if(!salirseTablero(disH, disV)){
            if(comprobarPiezaColor(fil,col,color)){
                nCasillas[orientacion]=pos-1; //Almacenamos la posicion de la pieza
                salir=true;
            }
        }else{
            nCasillas[orientacion]=pos-1; //Almacenamos la posicion de la pieza
            salir=true;
        }
        return salir;
    }
    
    /**
     * actCoordenadasTrasAccion()
     * Dependiendo de la orientacion actualiza las coordenadas de la figura tras una accion (mover o comer)
     * @param orientacion: orientacion del desplazamiento (0:N,1:E,2:O,3:S,4:NE,5:SE,6:S0,7:NO)
     * @param dist: numero de casillas que se desplaza
     * @return nCoordenas: coordenadas nuevas de la figura
     */
    public int[] actCoordenadasTrasAccion(int orientacion,int dist){
        int[] nCoordenadas=new int[Piezas.TAM_COORDENADAS];
        int filaAct=this.coordenadas[0];
        int colAct=this.coordenadas[1];
        
        if(orientacion==0){
                nCoordenadas[0]=filaAct-dist;
                nCoordenadas[1]=colAct;
            }else if(orientacion==1){
                nCoordenadas[0]=filaAct;
                nCoordenadas[1]=colAct+dist;
            }else if(orientacion==2){
                nCoordenadas[0]=filaAct+dist;
                nCoordenadas[1]=colAct;
            }else if(orientacion==3){
                nCoordenadas[0]=filaAct;
                nCoordenadas[1]=colAct-dist;
            }else if(orientacion==4){
                nCoordenadas[0]=filaAct-dist;
                nCoordenadas[1]=colAct+dist;
            }else if(orientacion==5){
                nCoordenadas[0]=filaAct+dist;
                nCoordenadas[1]=colAct+dist;
            }else if(orientacion==6){
                nCoordenadas[0]=filaAct+dist;
                nCoordenadas[1]=colAct-dist;
            }else if(orientacion==7){
                nCoordenadas[0]=filaAct-dist;
                nCoordenadas[1]=colAct-dist;
            }
        return nCoordenadas;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton iconoFigura;
    // End of variables declaration//GEN-END:variables

    
}
